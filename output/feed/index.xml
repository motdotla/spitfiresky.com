<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spitfire Sky Blog</title>
  <subtitle>web development blog</subtitle>
  <link href="http://spitfiresky.com//" rel="self" />
  <link href="http://spitfiresky.com/" />
  <updated>2010-12-31T15:27:30-08:00</updated>
  <author>
    <name>scottmotte</name>
    <email>scott@spitfiresky.com</email>
  </author>
  <id>http://spitfiresky.com/</id>
  
  <entry>
    <title>An App - Scottbalance</title>
    <link href="/blog/an-app-scottbalance.html" />
    <id>tag:spitfiresky.com,Thu Dec 30 23:00:00 -0800 2010:1293778800</id>
    <updated>Thu Dec 30 23:00:00 -0800 2010</updated>
    <content type="html">&lt;h2&gt;An App - Scottbalance&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://scottbalance.heroku.com/&quot;&gt;Scottbalance&lt;/a&gt; (&lt;a href=&quot;http://spitfiresky.com/portfolio/scottbalance.html&quot;&gt;portfolio link&lt;/a&gt;) is a tiny app with a simple role. It saves a daily history of your Scottrade account balance and emails it to you - automatically.&lt;/p&gt;
&lt;h3&gt;Why this app?&lt;/h3&gt;
&lt;p&gt;I have an account with &lt;a href=&quot;http://scottrade.com&quot;&gt;Scottrade&lt;/a&gt; where I invest in stocks. Scottrade does not include a feature to view your historical balances. It only shows your current day's balance. Scottrade does not provide an API to gather said historical balances either. I needed to be able to get a hold of my historical balances, so I built &lt;a href=&quot;http://scottbalance.heroku.com&quot;&gt;Scottbalance.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&quot;/images/portfolios/scottbalance-1.jpg&quot; width=&quot;545&quot;&gt;
&lt;/p&gt;
&lt;h3&gt;How does it work?&lt;/h3&gt;
&lt;p&gt;Using your Scottrade login information, the app screen scrapes your latest current balance and saves that information to your balance history. (Your login information is securely encrypted). After saving it, it emails you to let you know your latest balance for that day. Then by logging in you can see a list of your historical balances.&lt;/p&gt;
&lt;p&gt;Additionally, the app is smart enough to navigate through Scottrade's new security questions. And the app is designed to look good on your iphone so you can check your balances on the go.&lt;/p&gt;
&lt;h3&gt;Libraries and Tools Used&lt;/h3&gt;
&lt;p&gt;The app is hosted on &lt;a href=&quot;http://heroku.com&quot;&gt;heroku&lt;/a&gt;. It is built on &lt;a href=&quot;http://www.padrinorb.com/&quot;&gt;Padrino&lt;/a&gt;. It uses &lt;a href=&quot;http://rubygems.org/gems/bcrypt-ruby&quot;&gt;bcrypt&lt;/a&gt; to encrypt all Scottrade access information.  It uses &lt;a href=&quot;http://rubygems.org/gems/warden&quot;&gt;warden&lt;/a&gt; to handle user authentication. For the automatic logging into Scottrade and for the screenscraping of the balances it uses &lt;a href=&quot;http://rubygems.org/gems/mechanize&quot;&gt;mechanize&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;This was a personal project so it's certainly not polished but it does its job well. So I decided to make it available to everyone. If you also have a Scottrade account, then &lt;a href=&quot;http://scottbalance.heroku.com/users/new&quot;&gt;try it out&lt;/a&gt; and see what you think. It's free to use.&lt;/p&gt;
&lt;p class='followme'&gt;
  &lt;strong&gt;
    To follow me on twitter click
    &lt;a href='http://twitter.com/spitfiresky'&gt;here&lt;/a&gt;
  &lt;/strong&gt;
&lt;/p&gt;
&lt;br /&gt;
</content>
  </entry>
  
  <entry>
    <title>Riverside Ruby - Introduction to Ruby</title>
    <link href="/blog/riverside-ruby-introduction-to-ruby.html" />
    <id>tag:spitfiresky.com,Tue Sep 28 09:37:28 -0700 2010:1285691848</id>
    <updated>Tue Sep 28 09:37:28 -0700 2010</updated>
    <content type="html">&lt;h2&gt;Riverside Ruby - Introduction to Ruby&lt;/h2&gt;
&lt;p&gt;Here are the slides from my presentation to our first Riverside Ruby Meetup.&lt;/p&gt;
&lt;h3&gt;Slides&lt;/h3&gt;
&lt;object id=&quot;__sse5303192&quot; width=&quot;425&quot; height=&quot;355&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=konnichiwaruby-100927233029-phpapp02&amp;stripped_title=kon-nichi-waruby&amp;userName=scottmotte&quot; /&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;/&gt;&lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot;/&gt;&lt;embed name=&quot;__sse5303192&quot; src=&quot;http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=konnichiwaruby-100927233029-phpapp02&amp;stripped_title=kon-nichi-waruby&amp;userName=scottmotte&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; width=&quot;425&quot; height=&quot;355&quot;&gt;&lt;/embed&gt;&lt;/object&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
For this presentation I introduced ruby and some basics about the language. Additionally, I demonstrated the power and simplicity of ruby by using Sinatra to build a hello world app.
&lt;p class='followme'&gt;
  &lt;strong&gt;
    You should follow me on twitter
    &lt;a href='http://twitter.com/spitfiresky'&gt;here&lt;/a&gt;
  &lt;/strong&gt;
&lt;/p&gt;
&lt;br /&gt;
</content>
  </entry>
  
  <entry>
    <title>Getting Started with Sinatra</title>
    <link href="/blog/getting-started-with-sinatra.html" />
    <id>tag:spitfiresky.com,Mon May 31 18:16:33 -0700 2010:1275354993</id>
    <updated>Mon May 31 18:16:33 -0700 2010</updated>
    <content type="html">&lt;h2&gt;Getting Started with Sinatra&lt;/h2&gt;
&lt;p&gt;
  Sing me a song mister Sinatra. In this tutorial I get you started with sinatra, plus improve the folder structure of your app, and serve it up with unicorn.
&lt;/p&gt;
&lt;h3&gt;
  Installation
&lt;/h3&gt;
&lt;p&gt;
  &lt;script src=&quot;http://gist.github.com/420466.js?file=gistfile1.txt&quot;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;h3&gt;
  The Basics
&lt;/h3&gt;
&lt;p&gt;
  &lt;strong&gt;
    Type
    sudo mate hello.rb
  &lt;/strong&gt;
  and in the hello.rb put the following:
&lt;/p&gt;
&lt;p&gt;
  &lt;script src=&quot;http://gist.github.com/420468.js?file=hello.rb&quot;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
  Now you just need to run the app. Shotgun is great for this. It's a lot like script/server for unicorn apps.
  &lt;small&gt;
    (We'll use unicorn to do this later, but for now we'll keep it easy with shotgun)
  &lt;/small&gt;
&lt;/p&gt;
&lt;p&gt;
  &lt;script src=&quot;http://gist.github.com/420470.js?file=gistfile1.txt&quot;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;strong&gt;
  haml
&lt;/strong&gt;
&lt;p&gt;
  I like haml so let's bring it into the app now. We've already installed the haml gem so just change your hello.rb file to the following:
&lt;/p&gt;
&lt;p&gt;
  &lt;script src=&quot;http://gist.github.com/420473.js?file=hello.rb&quot;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;h3&gt;
  Move to folder structure
&lt;/h3&gt;
&lt;p&gt;
  I like an organized application that can handle future complexity. Let's setup a folder structure to make room for that possibility.
&lt;/p&gt;
&lt;p&gt;
  To begin, create a folder with the name of your app. I'm going to call my app careengine. Then, create the directory structure we'll be using.
&lt;/p&gt;
&lt;p&gt;
  &lt;script src=&quot;http://gist.github.com/420483.js?file=gistfile1.txt&quot;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
  In app.rb put the following:
&lt;/p&gt;
&lt;p&gt;
  &lt;script src=&quot;http://gist.github.com/420485.js?file=app.rb&quot;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
  This tells our / route to use index.haml from our views. Let's create that file now by type sudo mate views/index.haml.
&lt;/p&gt;
&lt;p&gt;
  &lt;script src=&quot;http://gist.github.com/420486.js?file=index.haml&quot;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;h3&gt;
  Unicorn
&lt;/h3&gt;
&lt;p&gt;
  Now that the app is contained inside a folder structure (slightly similar to rails), let's set the app up to serve itself with unicorn instead of shotgun. (Unicorn is what we will be using on our production server, and It's nice to keep development and production as similar as possible.)
&lt;/p&gt;
&lt;p&gt;
  &lt;small&gt;
    Don't forget to install unicorn:
    &lt;strong&gt;
      sudo gem install unicorn
    &lt;/strong&gt;
  &lt;/small&gt;
&lt;/p&gt;
&lt;p&gt;
  Unicorn works with a config.ru file so let's create that.
&lt;/p&gt;
&lt;p&gt;
  &lt;strong&gt;
    Type sudo mate config.ru
  &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
  &lt;script src=&quot;http://gist.github.com/420493.js?file=config.ru&quot;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
  Now just run the command 'unicorn' in terminal and then browse to http://localhost:8080 to view your app. Alternatively you can type unicorn -p 3000 to specify the port as 3000.
&lt;/p&gt;
&lt;p&gt;
  Great work, you setup a basic sinatra app, improved on the structure, and served it up with unicorn. You are well on your way to building more complex sinatra applications.
&lt;/p&gt;
&lt;p class='followme'&gt;
  &lt;strong&gt;
    You should
    &lt;a href='http://twitter.com/spitfiresky'&gt;follow me on twitter here.&lt;/a&gt;
  &lt;/strong&gt;
&lt;/p&gt;
&lt;br /&gt;
</content>
  </entry>
  
  <entry>
    <title>How you should be doing testing in Rails and how to get started</title>
    <link href="/blog/how-you-should-be-doing-testing-in-rails.html" />
    <id>tag:spitfiresky.com,Sat Oct 03 16:00:05 -0700 2009:1254610805</id>
    <updated>Sat Oct 03 16:00:05 -0700 2009</updated>
    <content type="html">&lt;h2&gt;How you should be doing testing in Rails and how to get started&lt;/h2&gt;
&lt;p&gt;Here I show you a good way to do testing in Rails (especially if you are a beginner tester) plus instructions on getting started.&lt;/p&gt;
&lt;h3&gt;Why test?&lt;/h3&gt;
&lt;p&gt;
  Testing is a good practice. You should be doing it. &lt;strong&gt;It will make you a better programmer&lt;/strong&gt; and save you a great deal of headache as your web app grows up. It is especially important when working alongside other programmers. Testing is not perfect though so don't try to be perfect. Just get started, and you will improve as time goes on.
&lt;/p&gt;
&lt;h3&gt;How should I be testing?&lt;/h3&gt;
&lt;p&gt;
  You should be:
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;#1 using rspec&lt;/strong&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;#2 testing your models&lt;/strong&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;#3 doing some integration tests&lt;/strong&gt;&lt;/li&gt;
  &lt;/ul&gt;
  Ignore all the other test strategies and tools out there - especially Cucumber (cuke makes me want to puke). It's awkward and arguably a significant waste of time. But it's even more a waste of time to test your controllers, helpers, and views separately. Don't.
&lt;/p&gt;
&lt;p&gt;
  Let's get started.
&lt;/p&gt;
&lt;h3&gt;rspec&lt;/h3&gt;
&lt;h4&gt;Installation&lt;/h4&gt;
&lt;p&gt;
  &lt;script src=&quot;http://gist.github.com/200971.js&quot;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
  That's it, you can now run 'rake spec' in your terminal, and it will run through all your specs (which are currently at zero count).
&lt;/p&gt;
&lt;h3&gt;Model testing&lt;/h3&gt;
&lt;h4&gt;
  Setup
&lt;/h4&gt;
&lt;p&gt;Before we get to the rspec testing we need to delete the test/* folder that rails creates by default. (We are using rspec, not test/unit, so we won't need the test/* folders. All our tests will live under spec/*.)&lt;/p&gt;
&lt;p&gt;
  &lt;script src=&quot;http://gist.github.com/200982.js&quot;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
  Next let's create the models folder and the person_spec.rb model spec.
&lt;/p&gt;
&lt;p&gt;
  &lt;script src=&quot;http://gist.github.com/200986.js&quot;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;h4&gt;
  Writing the model test
&lt;/h4&gt;
&lt;p&gt;
  Open up person_spec.rb in textmate or your text editor of choice and let's write our first spec.
&lt;/p&gt;
&lt;p&gt;
  &lt;script src=&quot;http://gist.github.com/200988.js&quot;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
  Run 'rake spec' in terminal, and you should get back the response of &quot;1 example, 0 failures&quot;. Congratulations. :)
&lt;/p&gt;
&lt;p&gt;
  &lt;strong&gt;Time for some test driven development.&lt;/strong&gt; We have decided that every person should have a first_name and last_name. (No use in having a person without one). Let's write two specs to test for this. They should both fail.
&lt;/p&gt;
&lt;p&gt;
  &lt;script src=&quot;http://gist.github.com/200990.js&quot;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
  Run 'rake spec', and you should receive the response back '3 examples, 2 failures'. Open up the person.rb model and add the validates_presence_of.
&lt;/p&gt;
&lt;p&gt;
  &lt;script src=&quot;http://gist.github.com/200991.js&quot;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
  Run 'rake spec' again, and you should receive the response back '3 examples, 0 failures'. Nice work, you just did test driven development.
&lt;/p&gt;
&lt;p&gt;
  Next let's refactor things slightly using our spec_helper.rb to store some reusable code. This is optional and isn't so useful with such a small suite of tests, but once your test count climbs to 50 or more it is really nice to have a setup similar to the following. It basically uses helper methods inside of spec_helper.rb (which is being required with the line 'require File.expand_path(File.dirname(__FILE__) + '/../spec_helper')').
&lt;/p&gt;
&lt;p&gt;
  &lt;strong&gt;person_spec.rb&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
  &lt;script src=&quot;http://gist.github.com/200999.js&quot;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
  &lt;strong&gt;spec_helper.rb&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
  &lt;script src=&quot;http://gist.github.com/201000.js&quot;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
  Good work. You've written a few model tests to test your person.rb model pretty well. Let's move on to integration testing.
&lt;/p&gt;
&lt;h3&gt;Integration testing&lt;/h3&gt;
&lt;p&gt;
  Before I demonstrate integration testing, let me say that many programmers test their views, helpers, and controllers separately. This is not smart and if you are doing that you should stop. Take Merb's testing approach as an example. Merb's testing framework encourages the developer to test the final http response rather than worry about testing your views, controllers, and helpers separately. Afterall, these three items are working together to create the final http response. It makes a lot of sense and saves a lot of time. (Yehuda Katz can tell you more about this in his &lt;a href=&quot;http://video.merbcamp.com/public/katz1.mp4&quot;&gt;video on merb testing&lt;/a&gt;).
&lt;/p&gt;
&lt;p&gt;
  Rails doesn't have Merb's fancy response testing, but it does have integration testing using the powerful webrat. (Cucumber uses Webrat - which is about the only thing I like about cucumber.)
&lt;/p&gt;
&lt;h4&gt;
  Setup
&lt;/h4&gt;
&lt;p&gt;
  &lt;script src=&quot;http://gist.github.com/201540.js&quot;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
  Add config.gem 'webrat' to your config/environments/test.rb file
&lt;/p&gt;
&lt;p&gt;
  &lt;script src=&quot;http://gist.github.com/201547.js&quot;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
  Open up spec_helper.rb and add the webrat configure block.
&lt;/p&gt;
&lt;p&gt;
  &lt;script src=&quot;http://gist.github.com/201542.js&quot;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
  Create the spec/integration folder and file
&lt;/p&gt;
&lt;p&gt;
  &lt;script src=&quot;http://gist.github.com/201543.js&quot;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;h4&gt;
  Write the integration test
&lt;/h4&gt;
&lt;p&gt;
  Now you are ready to write your first integration test using webrat. We are going to test some basics from the people scaffold we created. Edit spec/integration/people_spec.rb, make it look like the following, and run 'rake spec' again. You should receive the response back '5 examples, 0 failures'.
&lt;/p&gt;
&lt;p&gt;
  &lt;script src=&quot;http://gist.github.com/201548.js&quot;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;h4&gt;
  What is going on here?
&lt;/h4&gt;
&lt;p&gt;
  The majority of the above code is your standard rspec (before(:each) blocks, describe blocks, it &quot;should do something&quot; blocks, etc). The webrat methods we are using are 'visit' and 'response'.
&lt;/p&gt;
&lt;p&gt;
  &lt;strong&gt;visit&lt;/strong&gt; simulates an actual user visiting your website. You don't see it happen, but webrat is actually (sort of) visiting the site just like a normal user would in their browser. To visit other pages just do visit '/your/path'.
&lt;/p&gt;
&lt;p&gt;
  &lt;strong&gt;After the visit command is employed, webrat returns a response&lt;/strong&gt; from the webpage. This is essentially the http response a visitor's browser would receive. Here we are checking the response.status to verify it returned a 200 OK. To inspect the available response options use 'puts response.inspect'.
&lt;/p&gt;
&lt;p&gt;
  Now let's test that the response contains certain text. You can use webrat's have_selector or have_xpath methods to determine this. In fact, most of the time with webrat those are the methods you will be using in conjunction with visit and response. Let's check that the people/new page contains the correct form fields.
&lt;/p&gt;
&lt;p&gt;
  &lt;script src=&quot;http://gist.github.com/201562.js&quot;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
  Depending on how you built your scaffold all these tests will pass or you might get 2 failures back. I got two failures. Let's fix those two errors by adding the appropriate form fields to our views/people/new.html.erb file. It should look something like the following.
&lt;/p&gt;
&lt;p&gt;
  &lt;script src=&quot;http://gist.github.com/201563.js&quot;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
  Great work. You've already created 8 specs to test your application. Now just repeat the process while consulting the &lt;a href=&quot;http://rspec.rubyforge.org/rspec/1.2.8/&quot;&gt;rspec docs&lt;/a&gt; andthe &lt;a href=&quot;http://gitrdoc.com/brynary/webrat/tree/master&quot;&gt;webrat docs&lt;/a&gt;, and &lt;strong&gt;before you know it you will find testing a joy and a valuable addition to your programming knowledge&lt;/strong&gt;. Good luck, and you should follow me on twitter &lt;a href=&quot;http://twitter.com/spitfiresky&quot;&gt;here&lt;/a&gt; if you have questions.
&lt;/p&gt;
&lt;p&gt;
  Also, the example app I built along with this tutorial is &lt;a href=&quot;http://github.com/scottmotte/people&quot;&gt;here on github&lt;/a&gt;.
&lt;/p&gt;
&lt;br /&gt;
</content>
  </entry>
  
  <entry>
    <title>Sdruby Presentation on Titanium-Mobile</title>
    <link href="/blog/sdruby-presentation-on-titanium-mobile.html" />
    <id>tag:spitfiresky.com,Mon Sep 07 09:37:28 -0700 2009:1252341448</id>
    <updated>Mon Sep 07 09:37:28 -0700 2009</updated>
    <content type="html">&lt;h2&gt;Sdruby Presentation on Titanium-Mobile&lt;/h2&gt;
&lt;p&gt;Here are my slides from my sdruby presentation on &lt;a href=&quot;http://www.appcelerator.com/products/titanium-mobile/&quot;&gt;Titanium Mobile&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Slides&lt;/h3&gt;
&lt;object style=&quot;margin:0px&quot; width=&quot;425&quot; height=&quot;355&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=titanium-mobile-090907113638-phpapp01&amp;stripped_title=titanium-mobile&quot; /&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;/&gt;&lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot;/&gt;&lt;embed src=&quot;http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=titanium-mobile-090907113638-phpapp01&amp;stripped_title=titanium-mobile&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; width=&quot;425&quot; height=&quot;355&quot;&gt;&lt;/embed&gt;&lt;/object&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
For this presentation I covered getting started with Titanium mobile. Plus, I included example javascript code from the app I am currently building.
&lt;p class='followme'&gt;
  &lt;strong&gt;
    You should follow me on twitter
    &lt;a href='http://twitter.com/spitfiresky'&gt;here&lt;/a&gt;
  &lt;/strong&gt;
&lt;/p&gt;
&lt;br /&gt;
</content>
  </entry>
  
  <entry>
    <title>Counter Caching with MongoMapper</title>
    <link href="/blog/caching-with-mongomapper.html" />
    <id>tag:spitfiresky.com,Sat Aug 29 00:11:46 -0700 2009:1251529906</id>
    <updated>Sat Aug 29 00:11:46 -0700 2009</updated>
    <content type="html">&lt;h2&gt;Counter Caching with MongoMapper&lt;/h2&gt;
&lt;p&gt;MongoMapper makes column based counter caching simple. I think you'll be delighted.&lt;/p&gt;
&lt;h3&gt;What is counter caching?&lt;/h3&gt;
&lt;p&gt;Counter caching is a way to display the record count (or total - using the term loosely) for a has_many assocation. Ryan Bates did a screencast on &lt;a href=&quot;http://railscasts.com/episodes/23-counter-cache-column&quot;&gt;it&lt;/a&gt; and many apps today employ counter caching. &lt;small&gt;(aside: You should be doing things like counter caching before you just go and grab memcache.)&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;For example, I am building an application that keeps track of pilots' flights. A pilot is able to log their flights, and the application returns their total flights count. At first I displayed this value using Flight.count(:user_id =&gt; id) in the view. This was ok at first, but once a pilot had one thousand flights, page load times were noticeably longer so I added a counter cache column.&lt;/p&gt;
&lt;p&gt;Counter caching works well. I received some significant speed improvements.&lt;/p&gt;
&lt;p&gt;
  &lt;script src=&quot;http://gist.github.com/177422.js&quot;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;Ok, let's get on it with it.&lt;/p&gt;
&lt;h3&gt;How to setup counter caching in MongoMapper&lt;/h3&gt;
&lt;h4&gt;Scenario&lt;/h4&gt;
&lt;p&gt;I want to store the sum of a column in a cache. In my application a User has many Flights, and each flight has fields like hours, landings, night_hours, etc. I want to have methods like @user.total_hours, @user.total_landings, and @user.total_night_hours that cache themselves so my app can get similar speed advantages like you saw above.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To do this, I:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Added @user.total_something instance methods to my User model.&lt;/li&gt;
  &lt;li&gt;Added callbacks in my Flight model to clear the cache whenever the pilot adds/updates/destroys a flight.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Step #1: Add the instance methods to User.rb&lt;/h4&gt;
&lt;p&gt;
  &lt;script src=&quot;http://gist.github.com/177426.js&quot;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;h4&gt;Step #2: Add the clear cache callbacks to Flight.rb&lt;/h4&gt;
&lt;p&gt;
  &lt;script src=&quot;http://gist.github.com/177427.js&quot;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;That's it. You're done. You can now use @user.total_hours, @user.total_landings, etc in your views and your app will stay snappy.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Counter caching with MongoMapper ended up being just 14 lines of code. You don't have to hassle with migrations and you can meta-program your schema into the model. &lt;small&gt;(Thanks to John Nunemaker for building it that way. Thought: I really don't like the way ActiveRecord uses migrations. Plus, it decouples the schema from the model.)&lt;/small&gt;. It works with floating point numbers too.&lt;/p&gt;
&lt;p class='followme'&gt;
  &lt;strong&gt;
    Keep updated at
    &lt;a href='http://twitter.com/spitfiresky'&gt;twitter.com/spitfiresky&lt;/a&gt;
  &lt;/strong&gt;
&lt;/p&gt;
&lt;br /&gt;
</content>
  </entry>
  
  <entry>
    <title>Recap of my sdruby presentation on mongodb</title>
    <link href="/blog/recap-of-my-sdruby-presentation-on-mongodb.html" />
    <id>tag:spitfiresky.com,Fri Aug 07 09:30:06 -0700 2009:1249662606</id>
    <updated>Fri Aug 07 09:30:06 -0700 2009</updated>
    <content type="html">&lt;h2&gt;Recap of my sdruby presentation on mongodb&lt;/h2&gt;
&lt;p&gt;Here I recap my presentation on mongodb at sdruby last night.&lt;/p&gt;
&lt;h3&gt;Slides&lt;/h3&gt;
&lt;object style=&quot;margin:0px&quot; width=&quot;425&quot; height=&quot;355&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=mongodb-090806212433-phpapp01&amp;stripped_title=mongodb-1825613&quot; /&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;/&gt;&lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot;/&gt;&lt;embed src=&quot;http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=mongodb-090806212433-phpapp01&amp;stripped_title=mongodb-1825613&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; width=&quot;425&quot; height=&quot;355&quot;&gt;&lt;/embed&gt;&lt;/object&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;I am using mongodb on &lt;a href=&quot;http://staging.twinstang.com&quot;&gt;Twinstang redesigned&lt;/a&gt;. &lt;strong&gt;I started with couchdb, but encountered difficulties grasping the concept of map/reduce&lt;/strong&gt; for more powerful but necessary querying.&lt;/p&gt;
&lt;p&gt;Because of this limitation in my skills (and partially because couchdb is limited to doing map/reduce on your documents and cannot do an additional map/reduce on top of a previous map/reduce) I began running into barriers in development of features for my app, and I foresaw more issues on the way.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I switched to mongodb using MongoMapper and have been super satisfied.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Dynamic queries are a welcome return&lt;/li&gt;
  &lt;li&gt;There is a good balance of speed, features, and schema-less freedom&lt;/li&gt;
  &lt;li&gt;It should scale better than mysql with less effort&lt;/li&gt;
  &lt;li&gt;MongoMapper makes it a pleasure to work with&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Installation &amp; Running it&lt;/h3&gt;
&lt;p&gt;Installation of mongodb is from source but is quick and painless. After installation type sudo mongod run to run mongodb. You will probably want to use something like monit or god to monitor the process.&lt;/p&gt;
&lt;script src=&quot;http://gist.github.com/164002.js&quot;&gt;&lt;/script&gt;
&lt;h3&gt;Mongo vs Couch&lt;/h3&gt;
&lt;p&gt;Couchdb is really cool and I can't say enough how much I've enjoyed it - especially the concepts it is pushing. It has huge potential to open up applications to the masses with its embedded apps. It is essentially a framework and server rolled into one. And it has convinced me that the language of the future is javascript. Furthermore, it's idea to run apps in the browser locally and then replicate/sync is mouthwatering. There are a lot of promises and hopes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;However, map/reduce is difficult to grasp and couchdb's map/reduce feels like a neutered version&lt;/strong&gt;. How come I can't do map/reduces on already built design documents? In the end, couchdb left me somewhat disappointed. It was wrong for my app but was so exciting. I will be using couchdb in the future to build simple api based web apps that users can hook into.&lt;/p&gt;
&lt;p&gt;Mongodb on the other hand feels more traditional. It is not trying to shake things up. Instead, &lt;strong&gt;Mongodb accomplishes its main goal very well&lt;/strong&gt; - to bridge the gap between key/value stores and sql databases. It's fast, is focused on solving scaling issues that have haunted mysql, and it maintains the ease of use and power of dynamic queries.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use mongodb for your traditional web app - where your users are doing a lot of updates but where you are generally controlling the interface and features.&lt;/strong&gt; Use couchdb for focused web apps that are mostly an api or web hook and where your users are controlling the interface.&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;strong&gt;Mongodb (C++)&lt;/strong&gt;&lt;/td&gt;
    &lt;td&gt;&lt;strong&gt;Couchdb (Erlang)&lt;/strong&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;drivers &lt;small&gt;(php driver, ruby, python, and more)&lt;/small&gt;&lt;/td&gt;
    &lt;td&gt;REST &lt;small&gt;(very cool, but slightly slower. not really slower in practice though - except when it comes to replication as a tool to scale)&lt;/small&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;bson, document, schema-free&lt;/td&gt;
    &lt;td&gt;json, document, schema-free&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Dynamic queries, indexing &lt;small&gt;(familiar, and great for development time. it works.)&lt;/small&gt;&lt;/td&gt;
    &lt;td&gt;map/reduce &lt;small&gt;(needs a way to do map/reduce on a design document - essentially a map/reduce on top of a map/reduce)&lt;/small&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;gridfs &lt;small&gt;(needs an nginx/apache module. using send_data through an app or even through rack is too slow. however, supposed to be comparative to S3 if a module becomes available)&lt;/small&gt;&lt;/td&gt;
    &lt;td&gt;embedded attachments &lt;small&gt;(think email attachments. i really like the way couchdb handles attachments)&lt;/small&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;RAM&lt;/td&gt;
    &lt;td&gt;http cache&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Good at the web, faster development time &lt;small&gt;(dynamic queries are what we are used to User.first(:login =&gt; 'jennifer'))&lt;/small&gt;&lt;/td&gt;
    &lt;td&gt;Good at the web, slower development time &lt;small&gt;(because of map/reduce and you have to construct all your queries from javascript)&lt;/small&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Update in place &lt;small&gt;(good for high update rates)&lt;/small&gt;&lt;/td&gt;
    &lt;td&gt;MVCC &lt;small&gt;(fault tolerant, but requires compacting.)&lt;/small&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;master-master &lt;small&gt;(auto-sharding is under development and planned. which should make things quite easy to scale. *thanks Mark)&lt;/small&gt;&lt;/td&gt;
    &lt;td&gt;replication &lt;small&gt;(great for peer shared apps, but will be slow for large traditional web app databases replicating across servers - it's http)&lt;/small&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;50s kid &lt;small&gt;(Traditional, yet rock n' roll, fast cars. Feels comfortable yet feels like the future. good for traditional web apps)&lt;/small&gt;&lt;/td&gt;
    &lt;td&gt;indy kid &lt;small&gt;(Untraditional, crazy cool ideas (like embedded apps and running in your browser), but uncertain. better for untraditional web apps right now)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;h3&gt;Mongodb orms&lt;/h3&gt;
&lt;p&gt;If you are a rubyist use &lt;a href=&quot;http://github.com/jnunemaker/mongomapper&quot;&gt;MongoMapper&lt;/a&gt;. Hands down it's the best orm. It basically makes the driver easy to use and familiar with rails/merb.&lt;/p&gt;
&lt;h3&gt;Using MongoMapper&lt;/h3&gt;
&lt;h4&gt;Installation&lt;/h4&gt;
&lt;p&gt;sudo gem install mongomapper&lt;/p&gt;
&lt;p&gt;config.gem 'jnunemaker-mongomapper'&lt;/p&gt;
&lt;p&gt;dependency 'jnunemaker-mongomapper'&lt;/p&gt;
&lt;h4&gt;Model&lt;/h4&gt;
&lt;script src=&quot;http://gist.github.com/164028.js&quot;&gt;&lt;/script&gt;
&lt;h4&gt;Controller&lt;/h4&gt;
&lt;script src=&quot;http://gist.github.com/164033.js&quot;&gt;&lt;/script&gt;
&lt;h4&gt;Validations&lt;/h4&gt;
&lt;script src=&quot;http://gist.github.com/164035.js&quot;&gt;&lt;/script&gt;
&lt;h4&gt;Callbacks&lt;/h4&gt;
&lt;script src=&quot;http://gist.github.com/164036.js&quot;&gt;&lt;/script&gt;
&lt;h4&gt;Relationships&lt;/h4&gt;
&lt;script src=&quot;http://gist.github.com/164038.js&quot;&gt;&lt;/script&gt;
&lt;h4&gt;Embedded Documents&lt;/h4&gt;
&lt;script src=&quot;http://gist.github.com/164040.js&quot;&gt;&lt;/script&gt;
&lt;h4&gt;Additional info&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;created_at and updated_at are included automatically by MongoMapper&lt;/li&gt;
  &lt;li&gt;_id cannot currently be set with MongoMapper like it can in Couchrest&lt;/li&gt;
  &lt;li&gt;cannot currently do @doc[‘custom_field’] like in couchrest.&lt;/li&gt;
  &lt;li&gt;indexing: @doc.ensure_index :login&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Overall, I think mongodb with mongomapper is a smart way to go for a traditional web apps that are somewhat complicated (think facebook, basecamp, social networks) where you are providing an interface for your users to put information and then doing all kinds of things with that information.&lt;/p&gt;
&lt;p&gt;I think couchdb is more suited to simple applications with express purposes (think blogs, a 'twitter' of your friends, apis) and where replicating that data from computer to computer and going offline is important.&lt;/p&gt;
&lt;p class='followme'&gt;
  &lt;strong&gt;
    You should follow me on twitter
    &lt;a href='http://twitter.com/spitfiresky'&gt;here&lt;/a&gt;
  &lt;/strong&gt;
&lt;/p&gt;
&lt;br /&gt;
</content>
  </entry>
  
  <entry>
    <title>Choice Email Setup with Merb</title>
    <link href="/blog/choice-email-setup-with-merb.html" />
    <id>tag:spitfiresky.com,Tue Jul 28 17:51:28 -0700 2009:1248828688</id>
    <updated>Tue Jul 28 17:51:28 -0700 2009</updated>
    <content type="html">&lt;h2&gt;Choice Email Setup with Merb&lt;/h2&gt;
&lt;p&gt;Good day. Here I describe a choice email setup with Merb. You should be using this setup too.&lt;/p&gt;
&lt;h3&gt;SMTP or Sendmail?&lt;/h3&gt;
&lt;p&gt;Use Google Apps SMTP to send your mail from your merb application. Sendmail has three serious limitations.&lt;/p&gt;
&lt;p&gt;#1: Sendmail is specific to your server. When you move servers, you will have to reinstall sendmail. Your app should be as mobile and self-contained as possible. Merb does a great job of this with its bundling of gems, and you should continue that trend.&lt;/p&gt;
&lt;p&gt;#2: Emails sent via sendmail on your server are sent with extra hidden data that you don't need. This isn't a problem when you are sending regular emails, but is is a problem when you start sending text messages via email and want your web application to receive the user's text reply back. I was using sendmail with &lt;a href=&quot;http://flossedtoday.com&quot;&gt;Flossed Today&lt;/a&gt; to send out text messages, but subscribers using AT&amp;T (and I imagine other cell providers as well), were unable to reply back to the message. The reply was deemed too large for a text message by AT&amp;T's sms protocols. I determined this was because it was sending all the hidden sendmail data along with the text message. When I switched to Google Apps SMTP I no longer experienced this issue.&lt;/p&gt;
&lt;p&gt;#3: Google Apps keeps a nice sent mail history. Sendmail's logs are just not the same as being able to search in Google Apps.&lt;/p&gt;
&lt;h3&gt;Won't SMTP's connection time lock up my app's response/request cycle?&lt;/h3&gt;
&lt;p&gt;No, it doesn't have to. Use Merb's run_later method and you are golden.&lt;/p&gt;
&lt;p&gt;Many argue that using SMTP is a bad idea because sendmail makes your web app appear to run faster. They are right. With sendmail your application passes the email request to your local sendmail command. It doesn't have far to go so it is fast. With Google Apps SMTP your app has to connect to the remote SMTP server. It has a further distance to travel, and the connection time typically lasts 2-5 seconds. During this time your web app appears to be thinking to your visitor and they are left waiting an extra 2-5 seconds on top of whatever load time speeds your site already does.&lt;/p&gt;
&lt;p&gt;Thankfully, Merb has a run_later method that allows you to pass this email connection time off to a separate thread. Your application then loads speedily, and your user doesn't have to wait an extra 2-5 seconds. Now you can have the speed of sendmail and the advantages of Google Apps.&lt;/p&gt;
&lt;h3&gt;Setup&lt;/h3&gt;
&lt;p&gt;Signup for a Google Apps account - &lt;a href=&quot;http://www.google.com/apps/intl/en/group/index.html&quot;&gt;here&lt;/a&gt;, and finish the process verifying that you can send/receive emails from your new Google Apps account.&lt;/p&gt;
&lt;p&gt;Next setup your app to handle SMTP.&lt;/p&gt;
&lt;script src=&quot;http://gist.github.com/157807.js&quot;&gt;&lt;/script&gt;
&lt;h3&gt;Sending emails&lt;/h3&gt;
&lt;p&gt;In your application use the run_later method in conjunction&lt;/p&gt;
&lt;h4&gt;run_later&lt;/h4&gt;
&lt;p&gt;Merb's run_later method works out of the box with thin and mongrel, but has a bug with passenger and Merb 1.0.x. Create the the file '/merb/hacks/run_later.rb' in your application with the following code to fix it.&lt;/p&gt;
&lt;script src=&quot;http://gist.github.com/157821.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Then add the following to your init.rb file&lt;/p&gt;
&lt;script src=&quot;http://gist.github.com/157822.js&quot;&gt;&lt;/script&gt;
&lt;h4&gt;send_mail&lt;/h4&gt;
&lt;p&gt;Setup your mailers in merb like usual and use in your controller surrounded by run_later. Here is an example sending a confirmation email after a user signs up.&lt;/p&gt;
&lt;script src=&quot;http://gist.github.com/157824.js&quot;&gt;&lt;/script&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Linux's sendmail can be great, but when it comes to features and ease of configuration Google Apps can't be beat. Couple it with Merb's run_later method, and you can create really nice email functionality within your app. Plus, it is more scaleable since all the configuration is in the app, and connects remotely to Google Apps.&lt;/p&gt;
&lt;p class='followme'&gt;
  &lt;strong&gt;
    You should follow me on twitter
    &lt;a href='http://twitter.com/spitfiresky'&gt;here&lt;/a&gt;
  &lt;/strong&gt;
&lt;/p&gt;
&lt;br /&gt;
</content>
  </entry>
  
  <entry>
    <title>My Server Setup</title>
    <link href="/blog/my-server-setup.html" />
    <id>tag:spitfiresky.com,Thu Jul 23 13:37:08 -0700 2009:1248381428</id>
    <updated>Thu Jul 23 13:37:08 -0700 2009</updated>
    <content type="html">&lt;h2&gt;My Server Setup&lt;/h2&gt;
&lt;p&gt;Good day. Here I detail my server setup with &lt;a href=&quot;http://www.ubuntu.com/getubuntu/download-server&quot;&gt;Ubuntu 9.04&lt;/a&gt; on &lt;a href=&quot;http://rackspacecloud.com&quot;&gt;Rackspace Cloud&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Basics&lt;/h3&gt;
&lt;p&gt;Use the Slicehost articles &lt;a href=&quot;http://articles.slicehost.com/2008/11/28/ubuntu-intrepid-setup-page-1&quot;&gt;Step 1&lt;/a&gt; and &lt;a href=&quot;http://articles.slicehost.com/2008/11/28/ubuntu-intrepid-setup-page-2&quot;&gt;Step 2&lt;/a&gt; to get the basics of your server going. Use the Ubuntu Intrepid setup. It will work just fine with Ubuntu 9.04.&lt;/p&gt;
&lt;h3&gt;Ruby&lt;/h3&gt;
&lt;script src=&quot;http://gist.github.com/156639.js&quot;&gt;&lt;/script&gt;
&lt;h3&gt;Install Nginx and Passenger&lt;/h3&gt;
&lt;script src=&quot;http://gist.github.com/156642.js&quot;&gt;&lt;/script&gt;
&lt;h3&gt;Customize nginx&lt;/h3&gt;
Customize things according to &lt;a href=&quot;http://articles.slicehost.com/2009/3/5/ubuntu-intrepid-nginx-configuration&quot;&gt;here&lt;/a&gt;.
&lt;script src=&quot;http://gist.github.com/156644.js&quot;&gt;&lt;/script&gt;
&lt;h3&gt;Virtual Hosts&lt;/h3&gt;
&lt;script src=&quot;http://gist.github.com/156649.js&quot;&gt;&lt;/script&gt;
&lt;h3&gt;Install mysql&lt;/h3&gt;
&lt;script src=&quot;http://gist.github.com/156650.js&quot;&gt;-&lt;/script&gt;
&lt;h3&gt;Install couchdb&lt;/h3&gt;
&lt;script src=&quot;http://gist.github.com/156653.js&quot;&gt;&lt;/script&gt;
&lt;h3&gt;Install mongodb&lt;/h3&gt;
&lt;script src=&quot;http://gist.github.com/157744.js&quot;&gt;&lt;/script&gt;
&lt;h3&gt;Install email support with Postfix&lt;/h3&gt;
&lt;script src=&quot;http://gist.github.com/157765.js&quot;&gt;&lt;/script&gt;
&lt;h3&gt;Install ImageMagick&lt;/h3&gt;
&lt;script src=&quot;http://gist.github.com/157844.js&quot;&gt;&lt;/script&gt;
&lt;h3&gt;Ending&lt;/h3&gt;
&lt;p&gt;If you found this article useful &lt;a href=&quot;https://www.rackspacecloud.com/signup&quot;&gt;sign up with Rackspace Cloud&lt;/a&gt; using referral code REF-SPITFIRESKY.&lt;/p&gt;
&lt;p class='followme'&gt;
  &lt;strong&gt;
    You should follow me on twitter
    &lt;a href='http://twitter.com/spitfiresky'&gt;here&lt;/a&gt;
  &lt;/strong&gt;
&lt;/p&gt;
&lt;br /&gt;
</content>
  </entry>
  
  <entry>
    <title>Introduction</title>
    <link href="/blog/introduction.html" />
    <id>tag:spitfiresky.com,Wed Jul 15 21:47:05 -0700 2009:1247719625</id>
    <updated>Wed Jul 15 21:47:05 -0700 2009</updated>
    <content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Good day. My name is Scott Motte. Here I introduce myself and my company.&lt;/p&gt;
&lt;h3&gt;Scott Motte&lt;/h3&gt;
&lt;p&gt;Southern California. I was born here. I spent much of my early years swimming and building things with legos. That's still me today; torn between flying airplanes and mind numbing programming inside.&lt;/p&gt;
&lt;p&gt;From elementary to high school I spent my extracurricular time in athletics. Baseball was my favorite. I wanted one day to be a professional, but it wasn't to be. I had a good brain though so I went on to Pepperdine University to study international business.&lt;/p&gt;
&lt;p&gt;Freshman year in college I created my first website using the free 10mb of web space granted to each student - Pepperdine's greatest gift to me. Since then I've been forced to throw out much of what that school taught me about business, finding it ineffective, but that's for another post. It's 5 years later, and I'm mostly indoors now. Building things.&lt;/p&gt;
&lt;h3&gt;Spitfire Sky&lt;/h3&gt;
&lt;p&gt;In January 2009 I rebranded my business to Spitfire Sky. Since then my skills have improved immensely. I've built and launched 3 noteworthy web applications - &lt;a href=&quot;http://flossedtoday.com&quot;&gt;Flossed Today&lt;/a&gt;, &lt;a href=&quot;http://missmint.com&quot;&gt;Miss Mint&lt;/a&gt;, and &lt;a href=&quot;http://investapp.com&quot;&gt;Investapp&lt;/a&gt;. They haven't yet produced revenue, but one day they will.&lt;/p&gt;
&lt;p&gt;Spitfire Sky is not just me though. Since January 2009 I have worked closely with &lt;a href=&quot;http://jeromegn.com&quot;&gt;Jerome Gravel-Niquet of Canada&lt;/a&gt;. He does exemplary design work and has made me a better programmer. The designs for Flossed Today and Investapp were completely his. Working together we have proven to be a good team and are sharing ownership on our next project - &lt;a href=&quot;http://twinstang.com&quot;&gt;Twinstang&lt;/a&gt;. You should really &lt;a href=&quot;/contact.html&quot;&gt;hire us&lt;/a&gt; for your next web application project.&lt;/p&gt;
&lt;h3&gt;Concluding&lt;/h3&gt;
&lt;p&gt;I'm a disciplined hard working fellow. I like to set goals, and I'm good at programming. For fun, I like to fly. If I was independently wealthy, I'd spend my mornings building web applications and my afternoons flying airplanes. My greatest regret is that I never hit a home run all my years in baseball. Inside the park homeruns, yes, many, but never over the fence.&lt;/p&gt;
&lt;p class='followme'&gt;
  &lt;strong&gt;
    You should follow me on twitter
    &lt;a href='http://twitter.com/spitfiresky'&gt;here&lt;/a&gt;
  &lt;/strong&gt;
&lt;/p&gt;
&lt;br /&gt;
</content>
  </entry>
  
</feed>